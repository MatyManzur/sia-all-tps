import numpy as np
import pandas as pd
import itertools as it

""" A-I
[
    -1,  1,  1,  1, -1,
    1, -1, -1, -1,  1,
    1,  1,  1,  1,  1,
    1, -1, -1, -1,  1,
    1, -1, -1, -1,  1
]

[[1, 1, 1, -1, -1],
 [1, -1, 1, -1, -1],
 [1, 1, 1, -1, -1],
 [1, -1, 1, -1, -1],
 [1, 1, 1, 1, 1]]

[[-1, 1, 1, 1, -1],
 [1, -1, -1, -1, -1],
 [1, -1, -1, -1, -1],
 [1, -1, -1, -1, -1],
 [-1, 1, 1, 1, -1]]

[[1, 1, 1, -1, -1],
 [1, -1, 1, -1, -1],
 [1, -1, 1, -1, -1],
 [1, -1, 1, -1, -1],
 [1, 1, 1, -1, -1]]

[[1, 1, 1, 1, 1],
 [1, -1, -1, -1, -1],
 [1, 1, 1, -1, -1],
 [1, -1, -1, -1, -1],
 [1, 1, 1, 1, 1]]

[[1, 1, 1, 1, 1],
 [1, -1, -1, -1, -1],
 [1, 1, 1, -1, -1],
 [1, -1, -1, -1, -1],
 [1, -1, -1, -1, -1]]

[[-1, 1, 1, 1, -1],
 [1, -1, -1, -1, -1],
 [1, -1, 1, 1, -1],
 [1, -1, 1, -1, -1],
 [-1, 1, 1, 1, -1]]

[[1, -1, 1, -1, 1],
 [1, -1, 1, -1, 1],
 [1,  1, 1,  1, 1],
 [1, -1, 1, -1, 1],
 [1, -1, 1, -1, 1]]

[[-1, 1, -1, 1, -1],
 [-1, 1, -1, 1, -1],
 [-1, 1, -1, 1, -1],
 [-1, 1, -1, 1, -1],
 [-1, 1, -1, 1, -1]]

"""
A = [
    [-1, 1, 1, 1, -1],
    [1, -1, -1, -1, 1],
    [1, 1, 1, 1, 1],
    [1, -1, -1, -1, 1],
    [1, -1, -1, -1, 1]
]

B = [
    [1, 1, 1, -1, -1],
    [1, -1, -1, 1, -1],
    [1, 1, 1, -1, -1],
    [1, -1, -1, 1, -1],
    [1, 1, 1, -1, -1]
]

C = [
    [-1, 1, 1, 1, -1],
    [1, -1, -1, -1, -1],
    [1, -1, -1, -1, -1],
    [1, -1, -1, -1, -1],
    [-1, 1, 1, 1, -1]
]

D = [
    [1, 1, 1, -1, -1],
    [1, -1, -1, 1, -1],
    [1, -1, -1, 1, -1],
    [1, -1, -1, 1, -1],
    [1, 1, 1, -1, -1]
]

E = [
    [1, 1, 1, 1, 1],
    [1, -1, -1, -1, -1],
    [1, 1, 1, -1, -1],
    [1, -1, -1, -1, -1],
    [1, 1, 1, 1, 1]
]

F = [
    [1, 1, 1, 1, 1],
    [1, -1, -1, -1, -1],
    [1, 1, 1, -1, -1],
    [1, -1, -1, -1, -1],
    [1, -1, -1, -1, -1]
]

G = [
    [-1, 1, 1, 1, -1],
    [1, -1, -1, -1, -1],
    [1, -1, 1, 1, -1],
    [1, -1, -1, 1, -1],
    [-1, 1, 1, -1, -1]
]

H = [
    [1, -1, -1, -1, 1],
    [1, -1, -1, -1, 1],
    [1, 1, 1, 1, 1],
    [1, -1, -1, -1, 1],
    [1, -1, -1, -1, 1]
]

I = [
    [1, 1, 1, 1, 1],
    [-1, -1, 1, -1, -1],
    [-1, -1, 1, -1, -1],
    [-1, -1, 1, -1, -1],
    [1, 1, 1, 1, 1]
]

J = [
    [-1, -1, 1, 1, 1],
    [-1, -1, -1, 1, -1],
    [-1, -1, -1, 1, -1],
    [1, -1, -1, 1, -1],
    [-1, 1, 1, -1, -1]
]

K = [
    [1, -1, -1, -1, 1],
    [1, -1, -1, 1, -1],
    [1, 1, 1, -1, -1],
    [1, -1, -1, 1, -1],
    [1, -1, -1, -1, 1]
]

L = [
    [1, -1, -1, -1, -1],
    [1, -1, -1, -1, -1],
    [1, -1, -1, -1, -1],
    [1, -1, -1, -1, -1],
    [1, 1, 1, 1, 1]
]

M = [
    [1, -1, -1, -1, 1],
    [1, 1, -1, 1, 1],
    [1, -1, 1, -1, 1],
    [1, -1, -1, -1, 1],
    [1, -1, -1, -1, 1]
]

N = [
    [1, -1, -1, -1, 1],
    [1, 1, -1, -1, 1],
    [1, -1, 1, -1, 1],
    [1, -1, -1, 1, 1],
    [1, -1, -1, -1, 1]
]

O = [
    [-1, 1, 1, 1, -1],
    [1, -1, -1, -1, 1],
    [1, -1, -1, -1, 1],
    [1, -1, -1, -1, 1],
    [-1, 1, 1, 1, -1]
]

P = [
    [1, 1, 1, 1, -1],
    [1, -1, -1, -1, 1],
    [1, 1, 1, 1, -1],
    [1, -1, -1, -1, -1],
    [1, -1, -1, -1, -1]
]

Q = [
    [-1, 1, 1, 1, -1],
    [1, -1, -1, -1, 1],
    [1, -1, 1, -1, 1],
    [1, -1, -1, 1, -1],
    [-1, 1, 1, -1, 1]
]

R = [
    [1, 1, 1, 1, -1],
    [1, -1, -1, -1, 1],
    [1, 1, 1, 1, -1],
    [1, -1, -1, 1, -1],
    [1, -1, -1, -1, 1]
]

S = [
    [-1, 1, 1, 1, -1],
    [1, -1, -1, -1, -1],
    [-1, 1, 1, -1, -1],
    [-1, -1, -1, 1, -1],
    [1, 1, 1, -1, -1]
]

T = [
    [1, 1, 1, 1, 1],
    [-1, -1, 1, -1, -1],
    [-1, -1, 1, -1, -1],
    [-1, -1, 1, -1, -1],
    [-1, -1, 1, -1, -1]
]

U = [
    [1, -1, -1, -1, 1],
    [1, -1, -1, -1, 1],
    [1, -1, -1, -1, 1],
    [1, -1, -1, -1, 1],
    [-1, 1, 1, 1, -1]
]

V = [
    [1, -1, -1, -1, 1],
    [1, -1, -1, -1, 1],
    [-1, 1, -1, 1, -1],
    [-1, 1, -1, 1, -1],
    [-1, -1, 1, -1, -1]
]

W = [
    [1, -1, -1, -1, 1],
    [1, -1, -1, -1, 1],
    [1, -1, 1, -1, 1],
    [1, 1, -1, 1, 1],
    [1, -1, -1, -1, 1]
]

X = [
    [1, -1, -1, -1, 1],
    [-1, 1, -1, 1, -1],
    [-1, -1, 1, -1, -1],
    [-1, 1, -1, 1, -1],
    [1, -1, -1, -1, 1]
]

Y = [
    [1, -1, -1, -1, 1],
    [-1, 1, -1, 1, -1],
    [-1, -1, 1, -1, -1],
    [-1, -1, 1, -1, -1],
    [-1, -1, 1, -1, -1]
]

Z = [
    [1, 1, 1, 1, 1],
    [-1, -1, -1, 1, -1],
    [-1, -1, 1, -1, -1],
    [-1, 1, -1, -1, -1],
    [1, 1, 1, 1, 1]
]


alphabet_map = {
  'A': A,
  'B': B,
  'C': C,
  'D': D,
  'E': E,
  'F': F,
  'G': G,
  'H': H,
  'I': I,
  'J': J,
  'K': K,
  'L': L,  # Define the value for 'L' here
  'M': M,  # Define the value for 'M' here
  'N': N,  # Define the value for 'N' here
  'O': O,  # Define the value for 'O' here
  'P': P,  # Define the value for 'P' here
  'Q': Q,  # Define the value for 'Q' here
  'R': R,  # Define the value for 'R' here
  'S': S,  # Define the value for 'S' here
  'T': T,  # Define the value for 'T' here
  'U': U,  # Define the value for 'U' here
  'V': V,  # Define the value for 'V' here
  'W': W,  # Define the value for 'W' here
  'X': X,  # Define the value for 'X' here
  'Y': Y,  # Define the value for 'Y' here
  'Z': Z   # Define the value for 'Z' here
}

orthogonal_letters = {"I": I,
                      "J": J,
                      "R": R,
                      "X": X}


def orthogonal_like_letters():
    flat_letters = {k: np.array(v).flatten() for k, v in alphabet_map.items()}
    all_combinations = it.combinations(flat_letters.keys(), r=4)
    avg_dot_products = []
    max_dot_products = []

    for c in all_combinations:
        combination = np.array([v for k, v in flat_letters.items() if k in c])
        orto_matrix = combination.dot(combination.T)
        np.fill_diagonal(orto_matrix, 0)
        avg_dot_products.append((np.mean(np.abs(orto_matrix)), c))
        max_value = np.max(np.abs(orto_matrix))
        max_dot_products.append(((max_value, np.count_nonzero(np.abs(orto_matrix) == max_value)), c))

    df = pd.DataFrame(sorted(avg_dot_products), columns=["avg_dot_product", "letters"])
    print(df.head(15))
    df2 = pd.DataFrame(sorted(max_dot_products), columns=["max_dot_product", "letters"])
    print(df2.head(15))


if __name__ == '__main__':
    orthogonal_like_letters()

